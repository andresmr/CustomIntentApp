name: Issue Triage

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

jobs:
  triage:
    name: Auto-label Issues and PRs
    runs-on: ubuntu-latest
    
    steps:
    - name: Label bug reports
      uses: actions/github-script@v7
      if: github.event_name == 'issues'
      with:
        script: |
          const issue = context.payload.issue;
          const body = issue.body.toLowerCase();
          const title = issue.title.toLowerCase();
          
          const labels = [];
          
          // Auto-label based on content
          if (body.includes('bug') || title.includes('bug') || 
              body.includes('error') || body.includes('crash') || 
              body.includes('doesn\'t work')) {
            labels.push('bug');
          }
          
          if (body.includes('feature') || title.includes('feature') || 
              body.includes('enhancement') || body.includes('request')) {
            labels.push('enhancement');
          }
          
          if (body.includes('documentation') || title.includes('docs') || 
              body.includes('readme')) {
            labels.push('documentation');
          }
          
          if (body.includes('test') || title.includes('test') || 
              body.includes('testing')) {
            labels.push('testing');
          }
          
          if (body.includes('ui') || body.includes('interface') || 
              body.includes('design') || title.includes('ui')) {
            labels.push('ui');
          }
          
          if (body.includes('performance') || body.includes('slow') || 
              title.includes('performance')) {
            labels.push('performance');
          }
          
          // Add default label if no specific labels were added
          if (labels.length === 0) {
            labels.push('needs-triage');
          }
          
          // Apply labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: labels
            });
          }

    - name: Label PRs based on files changed
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const pr = context.payload.pull_request;
          
          // Get the files changed in this PR
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });
          
          const labels = [];
          const filenames = files.data.map(file => file.filename);
          
          // Check for specific file patterns
          if (filenames.some(f => f.includes('test') || f.includes('Test'))) {
            labels.push('testing');
          }
          
          if (filenames.some(f => f.includes('.md') || f.includes('README'))) {
            labels.push('documentation');
          }
          
          if (filenames.some(f => f.includes('.gradle') || f.includes('gradle'))) {
            labels.push('dependencies');
          }
          
          if (filenames.some(f => f.includes('ui/') || f.includes('compose') || f.includes('screen'))) {
            labels.push('ui');
          }
          
          if (filenames.some(f => f.includes('.yml') || f.includes('.yaml') || f.includes('.github'))) {
            labels.push('ci/cd');
          }
          
          if (filenames.some(f => f.includes('AndroidManifest.xml'))) {
            labels.push('configuration');
          }
          
          // Apply labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: labels
            });
          }